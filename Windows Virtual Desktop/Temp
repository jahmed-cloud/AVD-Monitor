KQL

AzureMetrics
|where ResourceProvider == "MICROSOFT.NETWORK"
|where MetricName == "DataProcessed"
|summarize format_bytes( sum(Total),0,"GB") by Resource, UnitName

Converted to MQL

let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/417e44b1-be17-4f25-8e37-f550e23922df/query", 
[Query=[#"query"="AzureMetrics
|where ResourceProvider == ""MICROSOFT.NETWORK""
|where MetricName == ""DataProcessed""
|summarize format_bytes( sum(Total),0,""GB"") by Resource, UnitName
",#"x-ms-app"="OmsAnalyticsPBI",#"timespan"="P7D",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery

KQL

//Query to show the Egress avg
AzureMetrics
|where ResourceProvider == "MICROSOFT.STORAGE"
|where MetricName == "Egress"
|summarize Egress_Avg = format_bytes(avg(Average),0,"KB")by Resource

Converted to MQL

let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/417e44b1-be17-4f25-8e37-f550e23922df/query", 
[Query=[#"query"="AzureMetrics
|where ResourceProvider == ""MICROSOFT.STORAGE""
|where MetricName == ""Egress""
|summarize Egress_Avg = format_bytes(avg(Average),0,""KB"")by Resource
",#"x-ms-app"="OmsAnalyticsPBI",#"timespan"="P7D",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery

KQL

//Query to show the Ingress avg
AzureMetrics
|where ResourceProvider == "MICROSOFT.STORAGE"
|where MetricName == "Ingress"
|summarize Egress_Avg = format_bytes(avg(Average),0,"KB")by Resource

Converted to MQL

let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/417e44b1-be17-4f25-8e37-f550e23922df/query", 
[Query=[#"query"="AzureMetrics
|where ResourceProvider == ""MICROSOFT.STORAGE""
|where MetricName == ""Ingress""
|summarize Egress_Avg = format_bytes(avg(Average),0,""KB"")by Resource
",#"x-ms-app"="OmsAnalyticsPBI",#"timespan"="P7D",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery

KQL
//Query to show the Throughput avg
AzureMetrics
|where ResourceProvider == "MICROSOFT.NETWORK"
|summarize Throughput = format_bytes(avg(Total), 0, "MB") by Resource

Converted to MQL 

let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/417e44b1-be17-4f25-8e37-f550e23922df/query", 
[Query=[#"query"="AzureMetrics
|where ResourceProvider == ""MICROSOFT.NETWORK""
|summarize Throughput = format_bytes(avg(Total), 0, ""MB"") by Resource
",#"x-ms-app"="OmsAnalyticsPBI",#"timespan"="P7D",#"prefer"="ai.response-thinning=true"],Timeout=#duration(0,0,4,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table
in AnalyticsQuery
